using CSV
using DataFrames
using Statistics
include("formulas.jl")
include("graph.jl")

# Read and standardize data
data = CSV.read("storage/data.csv", DataFrame)
stats = describe(data)[!, [:variable, :mean, :min, :max]]
stats.std = [std(data.km), std(data.price)]
km = (data[:, :km] .- stats.mean[1]) ./ stats.std[1]
price = (data[:, :price])

# Initialise hyperparamters
Œ∏‚ÇÄ = 0.0
Œ∏‚ÇÅ = 0.0
Œ± = 0.1
epochs = 100
m = size(data)[1]

function unscale(Œ∏‚ÇÄ, Œ∏‚ÇÅ)
    Œ∏‚ÇÄ = Œ∏‚ÇÄ - Œ∏‚ÇÅ * (stats.mean[1] / stats.std[1])
    Œ∏‚ÇÅ = Œ∏‚ÇÅ / stats.std[1]
    return Œ∏‚ÇÄ, Œ∏‚ÇÅ
end

anim = @animate for epoch in 1:epochs
    tmpŒ∏‚ÇÄ = Œ± * (1 / m) * ùö∫(map(estimatePrice, km) - price)
    tmpŒ∏‚ÇÅ = Œ± * (1 / m) * ùö∫((map(estimatePrice, km) - price) .* km)
    global Œ∏‚ÇÄ -= tmpŒ∏‚ÇÄ
    global Œ∏‚ÇÅ -= tmpŒ∏‚ÇÅ
    cost = J(Œ∏‚ÇÄ, Œ∏‚ÇÅ)
    animate_graphs()
    println(cost)
end

thetas = DataFrame(thetas = collect(unscale(Œ∏‚ÇÄ, Œ∏‚ÇÅ)))
CSV.write("storage/thetas.csv", thetas)

gif(anim, "storage/graphs.gif", fps = 15)
